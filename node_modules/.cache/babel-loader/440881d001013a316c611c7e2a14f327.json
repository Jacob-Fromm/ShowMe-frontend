{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jsfromm/Flatiron/code/mod5/project/ShowMe-frontend/src/App.js\";\nimport logo from \"./logo.svg\";\nimport 'fontsource-roboto';\nimport { Typography } from '@material-ui/core';\nimport './App.css';\nimport React, { Component } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect, withRouter } from \"react-router-dom\";\nimport Welcome from \"./Components/Welcome\";\nimport SignupComedian from './Components/SignupComedian';\nimport ComedianProfile from './Components/ComedianPreview';\nimport ComediansContainer from \"./Containers/ComediansContainer\";\nimport Header from \"./Components/Header\";\nimport { connect } from 'react-redux';\nimport { getShows, getComics } from \"./Redux/actions\";\nimport Links from \"./Components/NavBar\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentUser: {},\n      isComedianLoggedIn: false,\n      api: []\n    };\n\n    this.comedianSignupSubmitHandler = newUser => {\n      console.log(\"new user in app.js\", newUser);\n      fetch(\"http://localhost:3000/api/v1/comedians\", {\n        method: \"POST\",\n        headers: {\n          \"content-type\": \"application/json\",\n          \"accept\": \"application/json\"\n        },\n        body: JSON.stringify({\n          comedian: {\n            name: newUser.name,\n            email: newUser.email,\n            password: newUser.password,\n            personal_website: newUser.website,\n            city: newUser.city\n          }\n        })\n      }).then(r => r.json()).then(user => {\n        this.setState({\n          currentUser: user,\n          isComedianLoggedIn: true\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchShows();\n    this.props.fetchComics();\n  } // fetch('http://localhost:3000/api/v1/fans', {\n  //   method: 'POST',\n  //   headers: {\n  //     'Content-Type': 'application/json',\n  //     Accept: 'application/json'\n  //   },\n  //   body: JSON.stringify({\n  //     fan: {\n  //       name: \"sean padden\",\n  //       email: \"seanp@gmail.com\",\n  //       password: \"sean\",\n  //     }\n  //   })\n  // })\n  //   .then(r => r.json())\n  //   .then(console.log)\n\n\n  render() {\n    fetch('http://localhost:3000/api/v1/users', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          name: \"sylviawoods\",\n          password: \"whatscooking\"\n        }\n      })\n    }).then(r => r.json()).then(console.log);\n    console.log(\"state in app\", this.state.api);\n\n    if (this.state.isComedianLoggedIn) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/comedians\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 16\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(Links, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          render: () => /*#__PURE__*/_jsxDEV(Welcome, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 47\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/signup\",\n          render: () => /*#__PURE__*/_jsxDEV(SignupComedian, {\n            signupHandler: this.comedianSignupSubmitHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 47\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/comedians\",\n          render: () => /*#__PURE__*/_jsxDEV(ComediansContainer, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 50\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mdp = dispatch => {\n  return {\n    fetchShows: () => dispatch(getShows()),\n    fetchComics: () => dispatch(getComics())\n  };\n};\n\nexport default connect(null, mdp)(withRouter(App));","map":{"version":3,"sources":["/Users/jsfromm/Flatiron/code/mod5/project/ShowMe-frontend/src/App.js"],"names":["Typography","React","Component","BrowserRouter","Router","Switch","Route","Link","Redirect","withRouter","Welcome","SignupComedian","ComedianProfile","ComediansContainer","Header","connect","getShows","getComics","Links","App","state","currentUser","isComedianLoggedIn","api","comedianSignupSubmitHandler","newUser","console","log","fetch","method","headers","body","JSON","stringify","comedian","name","email","password","personal_website","website","city","then","r","json","user","setState","componentDidMount","props","fetchShows","fetchComics","render","Accept","mdp","dispatch"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport 'fontsource-roboto';\nimport { Typography } from '@material-ui/core';\nimport './App.css';\nimport React, {Component} from \"react\"\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n  withRouter\n} from \"react-router-dom\"; \nimport Welcome from \"./Components/Welcome\"\nimport SignupComedian from './Components/SignupComedian';\nimport ComedianProfile from './Components/ComedianPreview';\nimport ComediansContainer from \"./Containers/ComediansContainer\"\nimport Header from \"./Components/Header\"\nimport { connect } from 'react-redux'\nimport { getShows, getComics } from \"./Redux/actions\"\nimport Links from \"./Components/NavBar\"\n\nclass App extends React.Component {\n\n  state = {\n    currentUser: {},\n    isComedianLoggedIn: false,\n    api: []\n  }\n\n  componentDidMount(){\n    this.props.fetchShows()\n    this.props.fetchComics()\n  }\n\n\n  // fetch('http://localhost:3000/api/v1/fans', {\n  //   method: 'POST',\n  //   headers: {\n  //     'Content-Type': 'application/json',\n  //     Accept: 'application/json'\n  //   },\n  //   body: JSON.stringify({\n  //     fan: {\n  //       name: \"sean padden\",\n  //       email: \"seanp@gmail.com\",\n  //       password: \"sean\",\n  //     }\n  //   })\n  // })\n  //   .then(r => r.json())\n  //   .then(console.log)\n  comedianSignupSubmitHandler = (newUser) => {\n    console.log(\"new user in app.js\", newUser)\n    fetch(\"http://localhost:3000/api/v1/comedians\", {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        \"accept\": \"application/json\"\n      },\n      body: JSON.stringify({\n        comedian: {\n          name: newUser.name,\n          email: newUser.email,\n          password: newUser.password,\n          personal_website: newUser.website,\n          city: newUser.city\n        }\n      })\n    })\n      .then(r => r.json())\n      .then(user => {\n        this.setState({ currentUser: user, isComedianLoggedIn: true })\n      })\n  }\n  \n  render(){\n\n    fetch('http://localhost:3000/api/v1/users', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          name: \"sylviawoods\",\n          \n          password: \"whatscooking\",\n        }\n      })\n    })\n      .then(r => r.json())\n      .then(console.log)\n\n      console.log(\"state in app\", this.state.api)\n      if (this.state.isComedianLoggedIn) {\n        return <Redirect to=\"/comedians\" />\n      }\n      return (\n        <>\n        <div className=\"header\">\n            <Links />\n            <Header />\n        </div>\n        <Switch>\n          <Route exact path=\"/\" render={() => <Welcome /> } />\n          <Route path=\"/signup\" render={() => <SignupComedian signupHandler={this.comedianSignupSubmitHandler} />}/>\n          <Route path=\"/comedians\" render={() => <ComediansContainer /> } />\n        </Switch>\n        </>\n      );\n  }\n  \n}\n\nconst mdp = (dispatch) => {\n  return { fetchShows: () => dispatch(getShows()), fetchComics: () => dispatch(getComics()) }\n\n}\n\nexport default connect(null, mdp)(withRouter(App))\n"]},"metadata":{},"sourceType":"module"}